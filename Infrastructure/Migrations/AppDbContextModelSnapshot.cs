// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasComment("Primary key.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(10)")
                        .HasComputedColumnSql("(isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),''))")
                        .HasComment("Unique number identifying the customer assigned by the accounting system.")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<int?>("PersonId")
                        .HasColumnName("PersonID")
                        .HasColumnType("int")
                        .HasComment("Foreign key to Person.BusinessEntityID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreID")
                        .HasColumnType("int")
                        .HasComment("Foreign key to Store.BusinessEntityID");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID")
                        .HasColumnType("int")
                        .HasComment("ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("AK_Customer_AccountNumber");

                    b.HasIndex("PersonId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Customer","Sales");

                    b.HasComment("Current customer information. Also see the Person and Store tables.");
                });

            modelBuilder.Entity("Domain.Models.Person", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Primary key for Person records.");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml")
                        .HasComment("Additional contact information about the person stored in xml format. ");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml")
                        .HasComment("Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int")
                        .HasComment("0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. ");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person.")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person.")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Middle name or middle initial of the person.")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit")
                        .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true)
                        .HasComment("Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact")
                        .HasMaxLength(2);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Surname suffix. For example, Sr. or Jr.")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(8)")
                        .HasComment("A courtesy title. For example, Mr. or Ms.")
                        .HasMaxLength(8);

                    b.HasKey("BusinessEntityId")
                        .HasName("PK_Person_BusinessEntityID");

                    b.HasIndex("AdditionalContactInfo")
                        .HasName("PXML_Person_AddContact");

                    b.HasIndex("Demographics")
                        .HasName("XMLVALUE_Person_Demographics");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Person_rowguid");

                    b.HasIndex("LastName", "FirstName", "MiddleName");

                    b.ToTable("Person","Person");

                    b.HasComment("Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.");
                });

            modelBuilder.Entity("Domain.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasColumnType("int")
                        .HasComment("Primary key.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Financial accounting number reference.")
                        .HasMaxLength(15);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID")
                        .HasColumnType("int")
                        .HasComment("Customer billing address. Foreign key to Address.AddressID.");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(128)")
                        .HasComment("Sales representative comments.")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("varchar(15)")
                        .HasComment("Approval code provided by the credit card company.")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID")
                        .HasColumnType("int")
                        .HasComment("Credit card identification number. Foreign key to CreditCard.CreditCardID.");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID")
                        .HasColumnType("int")
                        .HasComment("Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasComment("Customer identification number. Foreign key to Customer.BusinessEntityID.");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order is due to the customer.");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Shipping cost.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0 = Order placed by sales person. 1 = Order placed online by customer.");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Dates the sales order was created.");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Customer purchase order number reference. ")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint")
                        .HasComment("Incremental number to track changes to the sales order over time.");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))")
                        .HasComment("Unique sales order identification number.")
                        .HasMaxLength(25);

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID")
                        .HasColumnType("int")
                        .HasComment("Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime")
                        .HasComment("Date the order was shipped to the customer.");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID")
                        .HasColumnType("int")
                        .HasComment("Shipping method. Foreign key to ShipMethod.ShipMethodID.");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID")
                        .HasColumnType("int")
                        .HasComment("Customer shipping address. Foreign key to Address.AddressID.");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Tax amount.");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID")
                        .HasColumnType("int")
                        .HasComment("Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))")
                        .HasComment("Total due from customer. Computed as Subtotal + TaxAmt + Freight.");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesOrderHeader","Sales");

                    b.HasComment("General sales order information.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.HasOne("Domain.Models.Person", "Person")
                        .WithMany("Customer")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Domain.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
